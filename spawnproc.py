import ctypes
from ctypes.wintypes import HANDLE, DWORD, LPWSTR, WORD, LPBYTE
khandle = ctypes.WinDLL("Kernel32.dll")

class PROCESS_INFORMATION(ctypes.Structure):
    _fields_= [
    ("hProcess", HANDLE),
    ("hThread", HANDLE),
    ("dWProcessId", DWORD),
    ("dWThreadId", DWORD)
    ]

#phandle = PROCESS_INFORMATION()

class STARTUPINFO(ctypes.Structure):
    _fields_= [
    ("cb",DWORD),
    ("lpReserved",LPWSTR),
    ("lpDesktop",LPWSTR),
    ("lpTitle",LPWSTR),
    ("dwX",DWORD),
    ("dwY",DWORD),
    ("dwXSize",DWORD),
    ("dwYSize",DWORD),
    ("dwXCountChars",DWORD),
    ("dwYCountChars",DWORD),
    ("dwFillAttribute",DWORD),
    ("dwFlags",DWORD),
    ("wShowWindow",WORD),
    ("cbReserved2",WORD),
    ("lpReserved2",LPBYTE),
    ("hStdInput",HANDLE),
    ("hStdOutput",HANDLE),
    ("hStdError",HANDLE)
    ]

lpApplicationName = "C:\\Windows\\System32\\taskmgr.exe"
lpCommandLine= None     
lpProcessAttributes= None     
lpThreadAttributes= None     
lpEnvironment= None     
lpCurrentDirectory = None
dwCreationFlags = 0x00000010
bInheritHandles = False
lpProcessInformation = PROCESS_INFORMATION() 
lpStartupInfo = STARTUPINFO()
lpStartupInfo.wShowWindow = 0x1
lpStartupInfo.dwFlags = 0x1

response = khandle.CreateProcessW(
    lpApplicationName,
    lpCommandLine,
    lpProcessAttributes,
    lpThreadAttributes,
    bInheritHandles,
    dwCreationFlags,
    lpEnvironment,
    lpCurrentDirectory,
    ctypes.byref(lpStartupInfo),
    ctypes.byref(lpProcessInformation)
)

if response > 0:
    print("Successfully spawned process")
else:
    print("Failed. Error code: {0}".format(khandle.GetLastError()))